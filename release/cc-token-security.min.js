"use strict";var security=angular.module("ccTokenSecurity",["ccTokenSecurity.events","ccTokenSecurity.storage","ccTokenSecurity.interceptor","ccTokenSecurity.service","ccTokenSecurity.provider","ngResource","ui.router"]);security.config(["$httpProvider","$stateProvider","ccTokenSecurityProvider",function(a,b,c){console.log("--- config dupa "+c.getDupa()),c.setTokenKey("hujjjj"),b.state("login",{url:"/login",templateUrl:"test/login.html",controller:"LoginController"}).state("logout",{url:"/logout",controller:"LogoutController"}).state("accessForbidden",{url:"/accessForbidden",templateUrl:"common/security/403.html"})}]).run(["$state","$rootScope","$location","AUTH_EVENTS","Session","Auth","ccTokenSecurity",function(a,b,c,d,e,f,g){console.log("--- run "+g.getTokenKey()),delete b.originalPath,b.$on("$stateChangeStart",function(d,e){var g=e.access;f.permitAll(g)||(f.isNotAuthenticated()?(d.preventDefault(),b.originalPath=c.path(),a.go("login")):f.hasRole(g)||(d.preventDefault(),a.go("accessForbidden")))}),b.$on(d.notAuthenticated,function(){a.go("login")}),b.$on(d.notAuthorized,function(){a.go("accessForbidden")})}]),angular.module("ccTokenSecurity.events",[]).constant("AUTH_EVENTS",{notAuthenticated:"notAuthenticated",notAuthorized:"notAuthorized"}),angular.module("ccTokenSecurity.service",["ccTokenSecurity.storage"]).factory("Auth",["Session",function(a){var b={};return b.permitAll=function(a){return!angular.isDefined(a)},b.isAuthenticated=function(){return null!==a.user()},b.isNotAuthenticated=function(){return!b.isAuthenticated()},b.hasRole=function(b){var c=a.user();if(null===c)return!1;var d=!1;return angular.forEach(c.roles,function(a){b===a&&(d=!0)}),d},b.currentUser=function(){return a.user()},b}]),angular.module("ccTokenSecurity.interceptor",["ccTokenSecurity.events","ccTokenSecurity.storage","ccTokenSecurity.provider"]).factory("securityInterceptor",["$rootScope","$q","Session","AUTH_EVENTS","tokenSecurity",function(a,b,c,d,e){var f={request:function(a){var b=c.authToken(),d=e.getTokenKey();return b&&(a.headers[d]=b),a},responseError:function(c){var e=c.status;return 401==e?a.$broadcast(d.notAuthenticated,c):403==e&&a.$broadcast(d.notAuthorized,c),b.reject(c)}};return f}]).config(["$httpProvider",function(a){a.interceptors.push("securityInterceptor")}]),angular.module("ccTokenSecurity.storage",["LocalStorageModule","ccTokenSecurity.provider"]).factory("Session",["localStorageService","ccTokenSecurity",function(a,b){var c=b.getTokenKey(),d=b.getUserKey();return{create:function(b){a.set(c,b.token),a.set(d,b)},user:function(){return a.get(d)},authToken:function(){return a.get(c)},invalidate:function(){a.remove(c),a.remove(d)}}}]),angular.module("ccTokenSecurity.provider",[]).provider("ccTokenSecurity",function(){var a="x-auth-token",b="user";this.getDupa=function(){return a},this.setTokenKey=function(b){a=b},this.setUserKey=function(a){b=a},this.$get=function(){return{getTokenKey:function(){return a},getUserKey:function(){return b}}}}),angular.module("ccTokenSecurity").controller("LoginController",["$http","$scope","$rootScope","$location","$state","$stateParams","AuthResource","Session",function(a,b,c,d,e,f,g,h){function i(){c.originalPath&&(d.path(c.originalPath),delete c.originalPath)}b.login=function(a,c){console.log("---> login method invoked"),g.authenticate("username="+a+"&password="+c).$promise.then(function(a){console.log("---> succ"),b.$parent.currentUser=a,h.create(a),i()})["catch"](function(){console.log("---> failure"),b.authenticationError=!0,b.tokenExpired=!1,h.invalidate()})},b.tokenExpired=null!==h.user()}]).factory("AuthResource",["$resource",function(a){return a(":action",{},{authenticate:{method:"POST",params:{action:"authenticate"},headers:{"Content-Type":"application/x-www-form-urlencoded"}}})}]),angular.module("ccTokenSecurity").controller("LogoutController",["$state","Session",function(a,b){b.invalidate(),a.go("login")}]);